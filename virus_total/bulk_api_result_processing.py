import json
import logging
from types import SimpleNamespace
from typing import List

from classes.database_client import DatabaseClient
from utils.utils import get_db_credentials
from virus_total.incremental_update import flatten_and_remove_duplicates, save_labels_categories_names_to_db

logging.basicConfig(
    format='%(asctime)s.%(msecs)03d %(levelname)s - %(funcName)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
)
LOG = logging.getLogger(__name__)
LOG.setLevel(logging.INFO)


def fetch_api_results(db_client: DatabaseClient) -> List[SimpleNamespace]:
    """
    Fetches the API results from the database.
    :param db_client: Database client.
    :return: List of API results.
    """
    query = """
    SELECT 
        id, 
        malware_id, 
        result
    FROM 
        virus_total.api_result;
    """
    try:
        results = db_client.query(query)
        LOG.info("Successfully fetched records from database.")
        return results
    except Exception as e:
        LOG.error(f"Error fetching records: {e}")
        raise


def extract_labels_categories_names(
    result: dict,
    sample_id: int,
    sample_threat_labels: dict,
    sample_threat_categories: dict,
    sample_threat_names: dict,
):
    """
    Extracts labels, categories and names from the result object.
        Side effect: modifies the dictionaries.
    :param result: Result object.
    :param sample_id: Sample ID.
    :param sample_threat_labels: Dictionary of sample threat labels.
    :param sample_threat_categories: Dictionary of sample threat categories.
    :param sample_threat_names: Dictionary of sample threat names.
    """
    popular_threat_classification = result.get("popular_threat_classification")

    if not popular_threat_classification:
        LOG.warning(f"Popular threat classification not found for sample ID: {sample_id}")
        return

    if "suggested_threat_label" in popular_threat_classification:
        sample_threat_labels[sample_id] = popular_threat_classification["suggested_threat_label"]

    if "popular_threat_category" in popular_threat_classification:
        sample_threat_categories[sample_id] = [x["value"] for x in popular_threat_classification["popular_threat_category"]]

    if "popular_threat_name" in popular_threat_classification:
        sample_threat_names[sample_id] = [x["value"] for x in popular_threat_classification["popular_threat_name"]]


def process_results(api_results: List[SimpleNamespace], db_client: DatabaseClient):
    """
    Processes the API results.
    :param api_results: List of API results.
    :param db_client Database client.
    """
    sample_threat_labels = {}
    sample_threat_categories = {}
    sample_threat_names = {}

    for result in api_results:
        sample_id = result.malware_id

        extract_labels_categories_names(
            dict(result.result),
            sample_id,
            sample_threat_labels,
            sample_threat_categories,
            sample_threat_names
        )

    save_labels_categories_names_to_db(
        sample_threat_labels,
        sample_threat_categories,
        sample_threat_names,
        db_client
    )


if __name__ == "__main__":
    db_credentials = get_db_credentials()
    db_client = DatabaseClient(**db_credentials, autocommit=True)
    db_client.connect()

    api_results: List[SimpleNamespace] = fetch_api_results(db_client)

    process_results(api_results, db_client)

    db_client.disconnect()