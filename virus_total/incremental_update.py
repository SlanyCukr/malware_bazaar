from collections import defaultdict
from typing import List

import vt
import json
import logging

from classes.database_client import DatabaseClient

logging.basicConfig(
    format='%(asctime)s.%(msecs)03d %(levelname)s - %(funcName)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
)
logging.getLogger().setLevel(logging.CRITICAL)
LOG = logging.getLogger(__name__)
LOG.setLevel(logging.INFO)

API_KEY = "c86575809a3fd9ab1896bbe8f29874b6dde326065649bb0ef60dbaddd91aeccd"

DATABASE_CREDENTIALS = {
    "host": "158.196.22.185",
    "user": "postgres",
    "password": "sX9iCneXiLs12Yk53MXrPboh",
    "port": 5433,
}

MAX_REQUESTS_PER_MINUTE = 4
FOCUSED_TAGS = [
    "AgentTesla",
    "agenttesla",
    "Ransomware",
    "ransomware",
    "NitroRansomware",
    "Qakbot",
    "qakbot",
    "Mirai",
    "mirai",
    "CoinMiner",
    "CoinMiner.XMRig",
]


def flatten_and_remove_duplicates(list_of_lists: List[List[str]]):
    """
    Flattens list of lists and removes duplicates.
    :param list_of_lists: List of lists.
    :return: Flattened list without duplicates.
    """
    return list(set([item for sublist in list_of_lists for item in sublist]))


def extract_labels_categories_names(
    result: vt.object.Object,
    sample_id: int,
    sample_threat_labels: dict,
    sample_threat_categories: dict,
    sample_threat_names: dict,
):
    """
    Extracts labels, categories and names from the result object.
        Side effect: modifies the dictionaries.
    :param result: Result object.
    :param sample_id: Sample ID.
    :param sample_threat_labels: Dictionary of sample threat labels.
    :param sample_threat_categories: Dictionary of sample threat categories.
    :param sample_threat_names: Dictionary of sample threat names.
    """
    sample_threat_labels[sample_id] = result.popular_threat_classification["suggested_threat_label"]

    sample_threat_categories[sample_id] = [x["value"] for x in result.popular_threat_classification["popular_threat_category"]]
    sample_threat_names[sample_id] = [x["value"] for x in result.popular_threat_classification["popular_threat_name"]]


def save_labels_categories_names_to_db(
    sample_threat_labels: dict,
    sample_threat_categories: dict,
    sample_threat_names: dict,
    db_client: DatabaseClient):

    # insert labels, categories and names into database
    db_client.insert_threat_labels([(x,) for x in sample_threat_labels.values()])
    db_client.insert_threat_categories([(x,) for x in flatten_and_remove_duplicates(sample_threat_categories.values())])
    db_client.insert_threat_names([(x,) for x in flatten_and_remove_duplicates(sample_threat_names.values())])

    # get their IDs from database
    sample_threat_labels_db_result = db_client.select_threat_labels(list(sample_threat_labels.values()))
    sample_threat_labels_ids = {x.id: x.threat_label for x in sample_threat_labels_db_result}

    sample_threat_categories_db_result = db_client.select_threat_categories(flatten_and_remove_duplicates(sample_threat_categories.values()))
    sample_threat_categories_ids = {x.id: x.threat_category for x in sample_threat_categories_db_result}

    sample_threat_names_db_result = db_client.select_threat_names(flatten_and_remove_duplicates(sample_threat_names.values()))
    sample_threat_names_ids = {x.id: x.threat_name for x in sample_threat_names_db_result}

    # replace labels, categories and names with their IDs
    for sample_id, threat_label in sample_threat_labels.items():
        sample_threat_labels[sample_id] = sample_threat_labels_ids[threat_label]

    for sample_id, threat_categories in sample_threat_categories.items():
        sample_threat_categories[sample_id] = [sample_threat_categories_ids[x] for x in threat_categories]

    for sample_id, threat_names in sample_threat_names.items():
        sample_threat_names[sample_id] = [sample_threat_names_ids[x] for x in threat_names]

    # insert labels, categories and names malware mapping into database
    db_client.insert_threat_labels_malware_mapping([(x, y) for x, y in sample_threat_labels.items()])

    threat_categories_malware_mapping = []
    for sample_id, threat_category_ids in sample_threat_categories.items():
        for threat_category_id in threat_category_ids:
            threat_categories_malware_mapping.append((sample_id, threat_category_id))
    db_client.insert_threat_categories_malware_mapping(threat_categories_malware_mapping)

    threat_names_malware_mapping = []
    for sample_id, threat_name_ids in sample_threat_names.items():
        for threat_name_id in threat_name_ids:
            threat_names_malware_mapping.append((sample_id, threat_name_id))
    db_client.insert_threat_names_malware_mapping(threat_names_malware_mapping)


if __name__ == "__main__":
    database_client = DatabaseClient(
        host=DATABASE_CREDENTIALS["host"],
        user=DATABASE_CREDENTIALS["user"],
        password=DATABASE_CREDENTIALS["password"],
        port=DATABASE_CREDENTIALS["port"],
    )

    samples_without_analysis = database_client.select_last_n_samples_without_virus_total(MAX_REQUESTS_PER_MINUTE, FOCUSED_TAGS)

    with vt.Client(API_KEY) as client:
        results = []

        sample_threat_labels = {}
        sample_threat_categories = {}
        sample_threat_names = {}

        for sample in samples_without_analysis:
            try:
                LOG.info(f"Getting analysis for {sample.sha256_hash}.")
                result = client.get_object(
                    f"/files/{sample.sha256_hash}",
                )
            except Exception as e:
                LOG.error(f"Error while getting analysis for {sample.sha256_hash}.")
                raise e
            results.append((sample.id, json.dumps(result.__dict__, indent=4)))

            extract_labels_categories_names(
                result,
                sample.id,
                sample_threat_labels,
                sample_threat_categories,
                sample_threat_names
            )

        save_labels_categories_names_to_db(
            sample_threat_labels,
            sample_threat_categories,
            sample_threat_names,
            database_client
        )
        database_client.insert_virus_total_analysis_into_database(results)

    database_client.disconnect()
