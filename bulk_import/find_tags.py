import asyncio
from types import SimpleNamespace
from typing import List

from classes.api_client_aiohttp import get_tags
from classes.database_client import DatabaseClient


DATABASE_CREDENTIALS = {
    "host": "158.196.22.185",
    "user": "postgres",
    "password": "sX9iCneXiLs12Yk53MXrPboh",
    "port": 5433,
}

API_CREDENTIALS = {
    "api_key": "c92fee6c36b88c47b2296eb340c4c410",
}


if __name__ == "__main__":
    database_client = DatabaseClient(
        host=DATABASE_CREDENTIALS["host"],
        user=DATABASE_CREDENTIALS["user"],
        password=DATABASE_CREDENTIALS["password"],
        port=DATABASE_CREDENTIALS["port"],
    )

    # select all samples without tags
    samples_without_tags = database_client.select_samples_without_tags_from_database()

    samples_tags_mapping = asyncio.run(get_tags(samples_without_tags))

    print("About to insert tags into database.")

    # find unique tags in samples_tags_mapping
    unique_tags = set()
    for sample_tags in samples_tags_mapping.values():
        for tag in sample_tags:
            unique_tags.add(tag)

    # insert unique tags into database
    database_client.insert_tags_into_database(list(unique_tags))

    print("About to process the data and insert tag mappings into database.")

    # select ids of tags from database
    tags_name_id_db_result: List[SimpleNamespace] = database_client.select_tags_from_database()

    # create a mapping from tag names to tag ids
    tags_name_id_mapping = {tag.tag: tag.id for tag in tags_name_id_db_result}

    # alter samples_tags_mapping to contain tag ids instead of tag names
    for sample, tags in samples_tags_mapping.items():
        samples_tags_mapping[sample] = [tags_name_id_mapping[tag] for tag in tags]

    # turn samples_tags_mapping into a list of tuples
    records_to_insert = []
    for sample, tags in samples_tags_mapping.items():
        for tag in tags:
            records_to_insert.append((sample, tag))

    # insert tag mappings into database
    database_client.insert_tag_mappings_into_database(records_to_insert)

    print("Done.")
