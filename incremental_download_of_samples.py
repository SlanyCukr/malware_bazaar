import logging
import os
from datetime import datetime
from typing import List

from classes.api_client import ApiClient
from classes.database_client import DatabaseClient

logging.basicConfig(
    format='%(asctime)s.%(msecs)03d %(levelname)s %(module)s - %(funcName)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
)
logging.getLogger().setLevel(logging.CRITICAL)
LOG = logging.getLogger(__name__)
LOG.setLevel(logging.INFO)

DATABASE_CREDENTIALS = {
    "host": "158.196.22.185",
    "user": "postgres",
    "password": "sX9iCneXiLs12Yk53MXrPboh",
    "port": 5433,
}

API_CREDENTIALS = {
    "api_key": "c92fee6c36b88c47b2296eb340c4c410",
}

SCRIPT_PATH = os.getcwd()
MALWARE_SAMPLE_PATH = os.path.join(SCRIPT_PATH, "malware_samples")


def filter_malware(malware: List[dict], last_timestamp: datetime) -> List[dict]:
    """
    Filter out malware that we already have in our database.
    :param malware: List of malware samples.
    :param last_timestamp: Timestamp of last malware in our database.
    :return: Filtered list of malware samples.
    """
    filtered_malware = []

    for sample in malware:
        timestamp = datetime.fromisoformat(sample["first_seen"])

        if timestamp > last_timestamp:
            filtered_malware.append(sample)

    return filtered_malware


def select_new_malware_samples(database_client: DatabaseClient, api_client: ApiClient) -> List[dict]:
    """
    Select new malware samples from the API.
        Side effect: downloads the malware samples and saves them to database.
    :param database_client: Database client
    :param api_client: Api client
    :return: List of new malware samples.
    """
    # select timestamp of last malware in our database
    last_timestamp: datetime = database_client.select_timestamp_of_last_malware_from_database()

    # select new malware from the API
    new_malware_response = api_client.query_latest_malware_samples().json()
    if new_malware_response["query_status"] == "no_results":
        LOG.debug("No new malware samples found.")
        exit(0)

    new_malware: List[dict] = new_malware_response["data"]

    # filter out the ones already in our database
    filtered_malware: List[dict] = filter_malware(new_malware, last_timestamp)
    if len(filtered_malware) == 0:
        LOG.debug("No new malware samples found.")
        exit(0)

    # extract only necessary values
    prepared_for_download: List[dict] = [
        {
            "sha256_hash": x["sha256_hash"],
            "time_bazaar": x["first_seen"],
            "tags": x["tags"] if x["tags"] is not None else [],
        }
        for x in filtered_malware
    ]

    # download the malware samples
    api_client.download_malware_samples(prepared_for_download)

    # insert them into the database
    database_client.insert_malware_into_database(prepared_for_download)

    return prepared_for_download


def replace_tags_with_tag_ids(prepared_for_download: List[dict]):
    """
    Replace tags with tag ids.
    :param prepared_for_download: List of malware samples.
    """
    # extract tags from prepared_for_download
    tags = set()
    for malware_sample in prepared_for_download:
        for tag in malware_sample["tags"]:
            tags.add(tag)

    # insert tags into database
    database_client.insert_tags_into_database(list(tags))

    # select tag ids from database for the tags
    tags_name_id_db_result = database_client.select_tags_from_database(tags=tags)

    # alter prepared_for_download to contain tag ids instead of tag names
    tags_name_id_mapping = {tag.tag: tag.id for tag in tags_name_id_db_result}
    for malware_sample in prepared_for_download:
        malware_sample["tags"] = [tags_name_id_mapping[tag] for tag in malware_sample["tags"]]


def find_malware_id_for_samples(prepared_for_download: List[dict]):
    """
    Find malware id for samples.
    :param prepared_for_download: List of malware samples.
    """
    filtered_samples_result = database_client.select_samples_filtered_by_hash([x["sha256_hash"] for x in prepared_for_download])

    # create a mapping from sha256_hash to malware id
    sha256_hash_id_mapping = {sample.sha256_hash: sample.id for sample in filtered_samples_result}

    # alter prepared_for_download to contain malware id
    for malware_sample in prepared_for_download:
        malware_sample["malware_id"] = sha256_hash_id_mapping[malware_sample["sha256_hash"]]


if __name__ == "__main__":
    database_client = DatabaseClient(
        host=DATABASE_CREDENTIALS["host"],
        user=DATABASE_CREDENTIALS["user"],
        password=DATABASE_CREDENTIALS["password"],
        port=DATABASE_CREDENTIALS["port"],
    )

    api_client = ApiClient(api_key=API_CREDENTIALS["api_key"], malware_sample_path=MALWARE_SAMPLE_PATH)

    prepared_for_download = select_new_malware_samples(database_client, api_client)

    replace_tags_with_tag_ids(prepared_for_download)

    find_malware_id_for_samples(prepared_for_download)

    # turn prepared_for_download into a list of tuples
    mappings_to_insert = []
    for malware_sample in prepared_for_download:
        for tag in malware_sample["tags"]:
            mappings_to_insert.append((malware_sample["malware_id"], tag))

    database_client.insert_tag_mappings_into_database(mappings_to_insert)

    LOG.debug(f"Inserted {len(prepared_for_download)} malware samples into the database.")
    LOG.debug(f"Inserted {len(mappings_to_insert)} tag mappings into the database.")

    database_client.disconnect()