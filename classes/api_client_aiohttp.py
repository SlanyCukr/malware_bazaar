import asyncio
from tqdm.asyncio import tqdm_asyncio
from types import SimpleNamespace
from typing import Dict, List

import aiohttp
from aiohttp.client import ClientSession

API_URL = "https://mb-api.abuse.ch/api/v1/"
HEADERS = {"API-KEY": "c92fee6c36b88c47b2296eb340c4c410", "Accept-Encoding": "gzip"}


async def get_tags_for_sample(sample: SimpleNamespace, session: ClientSession) -> Dict[int, List[str]]:
    """
    Get tags for a malware sample from the API.
    :param sample: Malware sample.
    :param session: aiohttp session
    :return: List of tag ids.
    """
    data = {
        "query": "get_info",
        "hash": sample.sha256_hash,
    }

    returned_dictionary = {sample.id: []}

    # retry 3 times when the response.json() returns error, then return returned_dictionary instead
    for i in range(3):
        try:
            async with session.post(API_URL, data=data, headers=HEADERS) as response:
                result = await response.json()
        except Exception as e:
            # sleep for 1 second before retrying
            await asyncio.sleep(1)
            continue
        if i == 2:
            return returned_dictionary
        break

    try:
        if result["query_status"] == "hash_not_found":
            return returned_dictionary

        if not result["data"][0]["tags"]:
            return returned_dictionary

        returned_dictionary[sample.id] = result["data"][0]["tags"]
        return returned_dictionary
    except:
        return returned_dictionary


async def get_tags(samples_without_tags: List[SimpleNamespace]) -> Dict[str, List[str]]:
    """
    Get tags for a malware sample from the API.
    :param samples_without_tags: List of malware samples.
    :return:
    """
    my_conn = aiohttp.TCPConnector(limit=12)

    print("About to start collecting tags.")

    async with aiohttp.ClientSession(connector=my_conn) as session:
        tasks = []
        for sample in samples_without_tags:
            task = asyncio.ensure_future(get_tags_for_sample(sample=sample, session=session))
            tasks.append(task)
        results = await tqdm_asyncio.gather(*tasks, total=len(samples_without_tags))

        # turn results into a dictionary
        results_dict = {}
        for result in results:
            results_dict.update(result)

        return results_dict
