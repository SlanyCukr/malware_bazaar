import os
from datetime import datetime
from pathlib import Path
from typing import List
from urllib.request import urlretrieve
import pandas as pd
import pyzipper
from tqdm import tqdm

from database_client import DatabaseClient

DATABASE_CREDENTIALS = {
    "host": "158.196.22.185",
    "user": "postgres",
    "password": "sX9iCneXiLs12Yk53MXrPboh",
    "port": 5433,
}

DAILY_EXPORTS_URL = "https://datalake.abuse.ch/malware-bazaar/daily"
MALWARE_SAMPLE_PATH = "/home/slanycukr/PycharmProjects/malware_bazaar/malware_samples/"

if __name__ == "__main__":
    database_client = DatabaseClient(
        host=DATABASE_CREDENTIALS["host"],
        user=DATABASE_CREDENTIALS["user"],
        password=DATABASE_CREDENTIALS["password"],
        port=DATABASE_CREDENTIALS["port"],
    )

    # load additional information about samples and
    # keep columns first_seen_utc and sha256_hash
    samples_additional_info = pd.read_csv("full.csv", comment="#", on_bad_lines="skip")
    samples_additional_info = samples_additional_info[["first_seen_utc", "sha256_hash"]]

    # convert to dictionary, sha256_hash as key, first_seen_utc as value
    samples_additional_info_dict = samples_additional_info.set_index("sha256_hash").to_dict()["first_seen_utc"]
    # remove " and whitespace in keys
    samples_additional_info_dict = {key.replace('"', "").strip(): value for key, value in samples_additional_info_dict.items()}

    # iterate from 2020-02-24 (first malware sample) to today
    for date in tqdm(pd.date_range(start="2020-02-24", end=datetime.today())):

        # download zip with name "%Y-%m-%d".zip
        filename = f"{date.strftime('%Y-%m-%d')}.zip"
        url = f"{DAILY_EXPORTS_URL}/{filename}"
        downloaded_file_path = str(Path(MALWARE_SAMPLE_PATH) / filename)

        _, _ = urlretrieve(url, downloaded_file_path)

        # unzip the file with password "infected"
        with pyzipper.AESZipFile(downloaded_file_path) as zf:
            zf.pwd = b"infected"
            zf.extractall(MALWARE_SAMPLE_PATH)
            sample_filenames = zf.namelist()

        # delete the zip file
        os.remove(downloaded_file_path)

        records_to_insert: List[dict] = []

        for sample_filename in sample_filenames:
            sha256_hash = sample_filename.split(".")[0]

            record_to_insert = {
                "time_bazaar": samples_additional_info_dict.get(sha256_hash, date),
                "sha256_hash": sha256_hash,
                "path_to_malware": str(Path(MALWARE_SAMPLE_PATH) / sample_filename),
            }

            records_to_insert.append(record_to_insert)

        database_client.insert_malware_into_database(records_to_insert)
