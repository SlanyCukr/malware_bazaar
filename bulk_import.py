import os
from datetime import datetime
from pathlib import Path
from typing import List
import pandas as pd
import pyzipper
import requests
from requests.sessions import Session
from concurrent.futures import ThreadPoolExecutor
from threading import local

from tqdm import tqdm

from database_client import DatabaseClient

DATABASE_CREDENTIALS = {
    "host": "158.196.22.185",
    "user": "postgres",
    "password": "sX9iCneXiLs12Yk53MXrPboh",
    "port": 5433,
}

DAILY_EXPORTS_URL = "https://datalake.abuse.ch/malware-bazaar/daily"
MALWARE_SAMPLE_PATH = "/home/slanycukr/PycharmProjects/malware_bazaar/malware_samples/"

thread_local = local()


def get_session() -> Session:
    if not hasattr(thread_local,'session'):
        thread_local.session = requests.Session()
    return thread_local.session


def get_database_client() -> DatabaseClient:
    if not hasattr(thread_local,'database_client'):
        thread_local.database_client = DatabaseClient(
            host=DATABASE_CREDENTIALS["host"],
            user=DATABASE_CREDENTIALS["user"],
            password=DATABASE_CREDENTIALS["password"],
            port=DATABASE_CREDENTIALS["port"],
        )
    return thread_local.database_client


def download_sample(date: datetime):
    """
    Download malware samples from the daily exports.
    :param date: Date of the daily export.
    """

    # download zip with name "%Y-%m-%d".zip
    filename = f"{date.strftime('%Y-%m-%d')}.zip"
    url = f"{DAILY_EXPORTS_URL}/{filename}"
    downloaded_file_path = str(Path(MALWARE_SAMPLE_PATH) / filename)

    session = get_session()
    with session.get(url) as response:
        with open(downloaded_file_path, "wb") as f:
            f.write(response.content)

    # unzip the file with password "infected"
    with pyzipper.AESZipFile(downloaded_file_path) as zf:
        zf.pwd = b"infected"
        zf.extractall(MALWARE_SAMPLE_PATH)
        sample_filenames = zf.namelist()

    # delete the zip file
    os.remove(downloaded_file_path)

    records_to_insert: List[dict] = []

    for sample_filename in sample_filenames:
        sha256_hash = sample_filename.split(".")[0]

        record_to_insert = {
            "time_bazaar": samples_additional_info_dict.get(sha256_hash, date),
            "sha256_hash": sha256_hash,
            "path_to_malware": str(Path(MALWARE_SAMPLE_PATH) / sample_filename),
        }

        records_to_insert.append(record_to_insert)

    database_client = get_database_client()
    try:
        database_client.insert_malware_into_database(records_to_insert)
    except:
        pass


if __name__ == "__main__":
    # load additional information about samples and
    # keep columns first_seen_utc and sha256_hash
    samples_additional_info = pd.read_csv("full.csv", comment="#", on_bad_lines="skip")
    samples_additional_info = samples_additional_info[["first_seen_utc", "sha256_hash"]]

    # convert to dictionary, sha256_hash as key, first_seen_utc as value
    samples_additional_info_dict = samples_additional_info.set_index("sha256_hash").to_dict()["first_seen_utc"]
    # remove " and whitespace in keys
    samples_additional_info_dict = {key.replace('"', "").strip(): value for key, value in samples_additional_info_dict.items()}

    date_range = pd.date_range(start="2020-02-24", end=datetime.today())
    with ThreadPoolExecutor(max_workers=10) as executor:
        list(tqdm(executor.map(download_sample, date_range), total=len(date_range)))
