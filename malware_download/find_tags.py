import asyncio
from types import SimpleNamespace
from typing import List

from tqdm import tqdm

from classes.api_client_aiohttp import get_tags
from classes.database_client import DatabaseClient
from utils.utils import get_db_credentials

ALREADY_KNOWN_TAGS = set()


def process_one_chunk(sample_chunk: List[SimpleNamespace]):
    """
    Process one chunk of samples.
    :param sample_chunk: List of samples.
    :return:
    """
    samples_tags_mapping = asyncio.run(get_tags(sample_chunk))

    print("About to insert tags into database.")

    # find unique tags in samples_tags_mapping, that are not in ALREADY_KNOWN_TAGS
    unique_tags = set()
    for sample_tags in samples_tags_mapping.values():
        for tag in sample_tags:
            if tag in ALREADY_KNOWN_TAGS:
                continue
            unique_tags.add(tag)

    # insert unique tags into database, that are not in ALREADY_KNOWN_TAGS
    database_client.insert_tags_into_database(list(unique_tags))

    # add unique tags to ALREADY_KNOWN_TAGS
    ALREADY_KNOWN_TAGS.update(unique_tags)

    print("About to process the data and insert tag mappings into database.")

    # select ids of tags from database
    tags_name_id_db_result: List[SimpleNamespace] = database_client.select_tags_from_database()

    # create a mapping from tag names to tag ids
    tags_name_id_mapping = {tag.tag: tag.id for tag in tags_name_id_db_result}

    # alter samples_tags_mapping to contain tag ids instead of tag names
    for sample, tags in samples_tags_mapping.items():
        samples_tags_mapping[sample] = [tags_name_id_mapping[tag] for tag in tags]

    # turn samples_tags_mapping into a list of tuples
    records_to_insert = []
    for sample, tags in samples_tags_mapping.items():
        for tag in tags:
            records_to_insert.append((sample, tag))

    # insert tag mappings into database
    database_client.insert_tag_mappings_into_database(records_to_insert)


if __name__ == "__main__":
    database_client = DatabaseClient(**get_db_credentials())

    # select all samples without tags
    samples_without_tags = database_client.select_samples_without_tags_from_database()

    # split samples into chunks of 5000
    samples_without_tags_chunks = [samples_without_tags[x:x + 5000] for x in range(0, len(samples_without_tags), 5000)]

    for chunk in tqdm(samples_without_tags_chunks):
        process_one_chunk(chunk)
