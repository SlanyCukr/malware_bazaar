import os
from datetime import datetime
from multiprocessing import Pool
from pathlib import Path
from typing import List
import pandas as pd
import pyzipper
from tqdm import tqdm
import re

from classes.database_client import DatabaseClient
from utils.utils import get_db_credentials

SCRIPT_PATH = os.getcwd()
MALWARE_SAMPLE_PATH = os.path.join(SCRIPT_PATH, "malware_samples")


def load_all_samples_to_db(date: datetime, db_client: DatabaseClient):
    """
    Download malware samples from the daily exports.
    :param date: Date of the daily export.
    """
    # load additional information about samples and
    # keep columns first_seen_utc and sha256_hash
    samples_additional_info = pd.read_csv("full.csv", comment="#", on_bad_lines="skip")
    samples_additional_info = samples_additional_info[["first_seen_utc", "sha256_hash"]]

    # convert to dictionary, sha256_hash as key, first_seen_utc as value
    samples_additional_info_dict = samples_additional_info.set_index("sha256_hash").to_dict()["first_seen_utc"]
    # remove " and whitespace in keys
    samples_additional_info_dict = {key.replace('"', "").strip(): value for key, value in samples_additional_info_dict.items()}

    # find all files in MALWARE_SAMPLE_PATH
    sample_filenames = [f for f in os.listdir(MALWARE_SAMPLE_PATH)]

    records_to_insert: List[dict] = []

    for sample_filename in sample_filenames:
        sha256_hash = sample_filename.split(".")[0]

        record_to_insert = {
            "time_bazaar": samples_additional_info_dict.get(sha256_hash, date),
            "sha256_hash": sha256_hash,
            "path_to_malware": str(Path(MALWARE_SAMPLE_PATH) / sample_filename),
        }

        records_to_insert.append(record_to_insert)

    db_client.insert_malware_into_database(records_to_insert)


def unzip_file(zip_filepath: str):
    """
    Unzips a ZIP file to the current directory.
    :param zip_filepath: The path to the ZIP file to unzip.
    """
    # unzip the file with password "infected"
    try:
        with pyzipper.AESZipFile(zip_filepath) as zf:
            zf.pwd = b"infected"
            zf.extractall(MALWARE_SAMPLE_PATH)
    except Exception as e:
        print(f"Error unzipping {zip_filepath}.")
    os.remove(zip_filepath)


if __name__ == "__main__":
    pattern = re.compile(r'\d{4}-\d{2}-\d{2}\.zip$')

    # unzip all files
    # Get a list of all ZIP files in the current directory, that have name like this regex: %Y-%m-%d.zip
    zip_files = [f for f in os.listdir(MALWARE_SAMPLE_PATH) if pattern.fullmatch(f)]

    # add full path to the files
    zip_files = [os.path.join(MALWARE_SAMPLE_PATH, f) for f in zip_files]

    # Create a pool of 32 worker processes
    with Pool(32) as p:
        # Use the pool to unzip all ZIP files in parallel, with tqdm to show progress
        list(tqdm(p.imap(unzip_file, zip_files), total=len(zip_files)))

    database_client = DatabaseClient(**get_db_credentials())

    load_all_samples_to_db(datetime.now(), database_client)
