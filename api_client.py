import os
from pathlib import Path
from typing import List, Callable
from zipfile import ZipFile

import pyzipper
import requests
from tqdm import tqdm


def check_result(func: Callable):
    def wrapper(*args, **kwargs) -> requests.Response:
        response: requests.models.Response = func(*args, **kwargs)

        if response.status_code != 200:
            raise Exception(
                f"""API returned status code {response.status_code}.
                Response: {response.text}.
                This happened when calling {func.__qualname__}."""
            )

        return response

    return wrapper


class ApiClient:
    """
    Api client for the Malware Bazaar API.
    """
    def __init__(self, api_key: str, malware_sample_path: str, url: str = "https://mb-api.abuse.ch/api/v1/"):
        self._api_key = api_key
        self._malware_sample_path = malware_sample_path
        self._url = url

        self._headers = {"API-KEY": self._api_key}

    @check_result
    def query_latest_malware_samples(self) -> requests.Response:
        """
        Query the latest malware additions created within the past 60 minutes from the API.
        :return: List of malware samples.
        """
        # data = {
        #     "query": "get_recent",
        #     "selector": "time",
        # }

        data = {
            "query": "get_recent",
            "selector": "100",
        }

        response = requests.post(self._url, data=data, timeout=15, headers=self._headers)

        return response

    @check_result
    def retrieve_one_malware_sample(self, sha256_hash: str) -> requests.Response:
        """
        Retrieve one malware sample from the API.
        :param sha256_hash: SHA256 hash of the malware sample.
        :return: Malware sample.
        """
        data = {
            "query": "get_file",
            "sha256_hash": sha256_hash,
        }

        response = requests.post(self._url, data=data, timeout=15, headers=self._headers)

        return response

    def download_malware_samples(self, malware_samples: List[dict]):
        """
        Download a malware sample from the API.
            Side effect: alters the malware_samples list by adding the path to the downloaded malware `path_to_malware`.
        :param malware_samples: List of malware samples.
        """
        for sample in tqdm(malware_samples):
            content = self.retrieve_one_malware_sample(sample["sha256_hash"]).content

            path_to_malware = Path(self._malware_sample_path) / sample['sha256_hash']
            path_to_malware_zip = str(path_to_malware.with_suffix(".zip_")) # extracted file could have the same name as the zip file

            # save the zip file
            with open(path_to_malware_zip, "w+b") as f:
                f.write(content)

            # unzip the file with password "infected"
            with pyzipper.AESZipFile(path_to_malware_zip) as zf:
                zf.pwd = b"infected"
                zf.extractall(self._malware_sample_path)
                inner_file_name = zf.namelist()[0]

            # delete the zip file
            os.remove(path_to_malware_zip)

            # name of the extracted file is not the same as the file name in `sample["file_name"]`
            # so just figure out the name from the zip file contents
            path_to_extracted_malware = str(Path(self._malware_sample_path) / inner_file_name)
            sample["path_to_malware"] = path_to_extracted_malware

        return malware_samples
